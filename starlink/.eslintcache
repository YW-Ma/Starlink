[{"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\index.js":"1","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\reportWebVitals.js":"2","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\App.js":"3","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\Header.js":"4","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\Footer.js":"5","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\Main.js":"6","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\SatSetting.js":"7","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\SatList.js":"8","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\constants.js":"9","F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\WorldMap.js":"10"},{"size":545,"mtime":1607572649952,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":268,"mtime":1608009698272,"results":"14","hashOfConfig":"12"},{"size":436,"mtime":1607583315082,"results":"15","hashOfConfig":"12"},{"size":280,"mtime":1607573266101,"results":"16","hashOfConfig":"12"},{"size":2947,"mtime":1608174940245,"results":"17","hashOfConfig":"12"},{"size":4103,"mtime":1608408348103,"results":"18","hashOfConfig":"12"},{"size":3897,"mtime":1608739072127,"results":"19","hashOfConfig":"12"},{"size":528,"mtime":1608408194718,"results":"20","hashOfConfig":"12"},{"size":8350,"mtime":1608739128161,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"11fiz97",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\index.js",[],["44","45"],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\reportWebVitals.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\App.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\Header.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\Footer.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\Main.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\SatSetting.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\SatList.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\constants.js",[],"F:\\OneDrive\\Developer\\Starlink\\Starlink\\starlink\\src\\components\\WorldMap.js",["46","47"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Spin } from \"antd\"\r\n\r\nimport { feature } from \"topojson-client\"\r\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\r\nimport { geoGraticule, geoPath } from 'd3-geo';\r\nimport { select as d3Select } from 'd3-selection';\r\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport * as d3Scale from \"d3-scale\";\r\n\r\nimport {WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY, ANIMATION_SPEED, RERENDER_PER_SECOND} from \"../constants\"\r\n\r\n\r\nconst width = 1024;\r\nconst height = 768;\r\n\r\nclass WorldMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      isDrawing: false\r\n    }\r\n    this.refMap = React.createRef();                                  // use ref to get a virtual node. So as we can draw on it.\r\n    this.refTrack = React.createRef();\r\n    this.map = null;\r\n    this.color = d3Scale.scaleOrdinal(schemeCategory10); // connect color and number\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(WORLD_MAP_URL)\r\n      .then( res => {\r\n        const { data } = res;                                         // retrieve the map data\r\n        const land = feature(data, data.objects.countries).features;  // land: border of 177 countries; topo: data, object: countries\r\n        this.generateMap(land);                                       // draw\r\n      })\r\n      .catch(e => console.error(\"err in fetch world map data\", e));\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    // determine whether prevProps and current props is different. Make a HTTPRequest only when props changed.\r\n    if(prevProps.satList !== this.props.satList) {\r\n      const {latitude, longitude, elevation, altitude, duration} = this.props.settings;\r\n      const endTime = duration * ANIMATION_SPEED; // speed up\r\n\r\n      this.setState({\r\n        isLoading: true\r\n      });\r\n\r\n      // step1: fetch data from API - a list of promise object\r\n      const urls = this.props.satList.map(sat => {\r\n        // Request: /positions/{id}/{observer_lat}/{observer_lng}/{observer_alt}/{seconds}//&apiKey={API_KEY}\r\n        const { satid } = sat;\r\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${altitude}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n        // send ajax call\r\n        return axios.get(url);\r\n      })\r\n\r\n      // step2: handle urls and extract results - Promise.all(...array...).then(results=>{})\r\n      Promise.all(urls)\r\n        .then(results => { // results are all returned promises from each axios.get(url)\r\n          this.setState({\r\n            isLoading: false,\r\n            isDrawing: true\r\n          });\r\n          if (!prevState.isDrawing) {\r\n            const data = results.map(item => item.data);\r\n            this.track(data);\r\n          } else {\r\n            const oHint = document.getElementsByClassName(\"hint\")[0];\r\n            oHint.innerHTML =\r\n              \"Please wait for these satellite animation to finish before selection new ones!\";\r\n          }\r\n        })\r\n        .catch(e => {\r\n          console.error(\"failed -> \", e);\r\n        });\r\n    }\r\n  }\r\n\r\n  // a callback used in componentDidUpdate - draw all satellites on the second canvas.\r\n  track = data => {\r\n    // validate the input\r\n    if (!data || !data[0].hasOwnProperty('positions')) {\r\n      throw new Error(\"no position data\", data);\r\n    }\r\n\r\n    const len = data[0].positions.length;\r\n    const { duration } = this.props.settings;\r\n    const { context2 } = this.map;\r\n\r\n    // Step 1: draw time on the top\r\n    // current time\r\n    let initialTime = new Date();\r\n    let i = 0;\r\n    // interval between two drawing\r\n    let timer = setInterval(() => {\r\n      let currentTime = new Date();\r\n      let timePassed = i === 0 ? 0 : currentTime - initialTime;\r\n      // 1 sec in display == 1 minute in real world (corresponding to accelerated positions we got)\r\n      let time = new Date(initialTime.getTime() + 60 * timePassed);\r\n\r\n      context2.clearRect(0, 0, width, height); // clear the rect area.\r\n\r\n      context2.font = \"bold 20px sans-serif\";\r\n      context2.fillStyle = \"#333\";\r\n      context2.textAlign = \"center\";\r\n      context2.fillText(d3TimeFormat(time), width / 2, 20);\r\n\r\n      if (i >= len) {                   // timer cannot excced the length of positions array\r\n        clearInterval(timer);\r\n        this.setState({ isDrawing: false });\r\n        const oHint = document.getElementsByClassName(\"hint\")[0];\r\n        oHint.innerHTML = \"\";\r\n        return;\r\n      }\r\n\r\n      data.forEach(sat => {             // draw\r\n        const { info, positions } = sat;\r\n        this.drawSat(info, positions[i]);\r\n      });\r\n\r\n      i += ANIMATION_SPEED / RERENDER_PER_SECOND;\r\n    }, 1000 / RERENDER_PER_SECOND)\r\n  }\r\n\r\n  // a helper function used in track to draw each satellite\r\n  drawSat = (sat, pos) => {\r\n    const { satlongitude, satlatitude } = pos;\r\n    if (!satlongitude || !satlongitude) return;\r\n\r\n    const { satname } = sat;\r\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\"); // extract satname number\r\n\r\n    const { projection, context2 } = this.map;\r\n    const xy = projection([satlongitude, satlatitude]); // get coordinate\r\n    context2.fillStyle = this.color(nameWithNumber); // name is a number\r\n    context2.beginPath();\r\n    context2.arc(xy[0], xy[1], 4, 0,2 * Math.PI); //radius, startAngle, endAngle\r\n    context2.fill();\r\n\r\n    context2.font = \"bold 11px sans-serif\";\r\n    context2.textAlign = \"center\";\r\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\r\n  }\r\n\r\n  // a callback used in componentDidMount - prepare 2 canvases' context & draw a world map on the first canvas\r\n  generateMap = land => {\r\n    const projection = geoKavrayskiy7()                            // Step 1: configure the projection method\r\n      .scale(180)\r\n      //.translate(width / 2, height / 2)                          // NOTICE: translate need an array\r\n      .translate([width / 2, height / 2])\r\n      .precision(.1);\r\n\r\n    const graticule = geoGraticule();                              // Step 2: get the longitude and latitude\r\n\r\n    const canvas = d3Select(this.refMap.current)                  // Step 3.1: let d3-selection get the canvas to draw world map\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n\r\n    const canvas2 = d3Select(this.refTrack.current)               // Step 3.2: let d3 get the canvas to draw the satellite\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n\r\n    const context = canvas.node().getContext(\"2d\");       // path can convert realworld data to context using projection\r\n    const context2 = canvas2.node().getContext(\"2d\");\r\n\r\n    let path = geoPath().projection(projection).context(context);\r\n\r\n    land.forEach( ele => {                                        // Step 4.1 : draw countries' border\r\n      context.fillStyle = '#B3DDEF';\r\n      context.strokeStyle = '#000';\r\n      context.globalAlpha = 0.7;\r\n      context.beginPath();\r\n      path(ele);            // draw the border of a country\r\n      context.fill();       // fill the country\r\n      context.stroke();\r\n    })\r\n\r\n    context.strokeStyle = 'rgba(220, 220, 220, 0.5)';           //Step 4.2: draw longitude and latitude\r\n    context.beginPath();\r\n    path(graticule());\r\n    context.lineWidth = 1;\r\n    context.stroke();\r\n\r\n    context.beginPath();                                        //Step 4.3: draw head and bottom\r\n    context.lineWidth = 1;\r\n    path(graticule.outline());\r\n    context.stroke();\r\n\r\n    this.map = {                                                //Step 5: store map in a field. they don't update UI so\r\n      context: context,                                          //       there is no need to store them in a state\r\n      context2: context2,\r\n      projection: projection\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isLoading } = this.state;\r\n    return (\r\n      <div className=\"map-box\">\r\n        {isLoading ? (\r\n          <div className=\"spinner\">\r\n            <Spin tip=\"Loading...\" size=\"large\" />\r\n          </div>\r\n        ) : null}\r\n        <canvas className=\"map\" ref={this.refMap}/>\r\n        <canvas className=\"track\" ref={this.refTrack}/>\r\n        <div className=\"hint\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorldMap;\r\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":45,"column":35,"nodeType":"54","messageId":"55","endLine":45,"endColumn":44},{"ruleId":"52","severity":1,"message":"56","line":91,"column":13,"nodeType":"54","messageId":"55","endLine":91,"endColumn":21},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'elevation' is assigned a value but never used.","Identifier","unusedVar","'duration' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]